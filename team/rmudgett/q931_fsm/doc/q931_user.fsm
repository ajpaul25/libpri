/*
 * FSM pseudo code used in the design/implementation of the
 * Q.931 user side.
 *
 * Q.931 Section 5
 * Q.931 Annex A Figure A.3
 */
FSM q931_user
{
	Prolog {
	}
	Init {
		Next_State q931_user_null;
	}
	Epilog {
	}
	Stimulus Q931_EV_MGMT_DESTROY {
		Next_State q931_user_null;
	}
	Stimulus Q931_EV_MSG_STATUS_ENQUIRY {
		Action Send(STATUS(current_state));
	}
	Stimulus Q931_EV_DL_RELEASE_IND {
		/* Ignore. */
	}
	Stimulus Q931_EV_DL_ESTABLISH_IND {
		/* Ignore. */
	}
	Stimulus Q931_EV_DL_ESTABLISH_CONFIRM {
		/* Ignore. */
	}

/* ******************************************************************** */

	State q931_user_null {// aka U0
		Prolog {
			Action Set_State(Q931_CALL_STATE_NULL);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_DESTROY {
			/* Terminate the FSM */
			Next_State *;
		}
		Stimulus Q931_EV_MGMT_RESUME_REQ(call_id) {
			/* Need to pick a new call reference */
			Action Pick_Call_Reference;
			Action Send(RESUME(call_id));
			Next_State q931_user_resume_request;
		}
		Stimulus Q931_EV_MSG_REGISTER {
			Action Post_Mgmt(REGISTER);
			Next_State q931_user_call_independent_service;
		}
		Stimulus Q931_EV_MGMT_REGISTER {
			/* Call reference already selected when call structure created. */
			Action Pick_Call_Reference;
			Action Send(REGISTER);
			Next_State q931_user_call_independent_service;
		}
		Stimulus Q931_EV_MSG_SETUP {
			Action Post_Mgmt(SETUP);
			Next_State q931_user_call_present;
		}
		Stimulus Q931_EV_MGMT_SETUP {
			/* Call reference already selected when call structure created. */
			Action Pick_Call_Reference;
			Action Send(SETUP);
			Next_State q931_user_call_initiated;
		}
		Stimulus Q931_EV_MSG_STATUS {
			if (Get_STATUS_Call_State != Q931_CALL_STATE_NULL) {
				Action Send(RELEASE_COMPLETE(PRI_CAUSE_WRONG_CALL_STATE));
			}
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Send(RELEASE_COMPLETE(PRI_CAUSE_NORMAL_CLEARING));
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			/* Ignore RELEASE_COMPLETE messages. */
		}
		Stimulus Q931_EV_MSG_other {
			Action Send(RELEASE_COMPLETE(PRI_CAUSE_INVALID_CALL_REFERENCE));
		}
	}

/* ******************************************************************** */

	State q931_user_call_initiated {// aka U1
		Prolog {
			Action Set_State(Q931_CALL_STATE_CALL_INITIATED);
			Action Start_T303;
		}
		Init {
		}
		Epilog {
			Action Stop_T303;
		}
		Stimulus Q931_EV_MGMT_OVERLAP_DIGIT(digit) {
			Action Save_Overlap_Digit(digit);
		}
		Stimulus Q931_EV_MGMT_DISCONNECT_REQ(cause) {
			Action Send(DISCONNECT(cause));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_MSG_SETUP_ACKNOWLEDGE {
			if (Stored_Overlap_Digits) {
				Action Send(INFORMATION(Stored_Overlap_Digits));
			}
			Action Post_Mgmt(SETUP_ACKNOWLEDGE);
			Next_State q931_user_overlap_sending;
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			Action Post_Mgmt(HANGUP(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_PROCEEDING {
			Action Post_Mgmt(PROCEEDING);
			Next_State q931_user_outgoing_call_proceeding;
		}
		Stimulus Q931_EV_TIMEOUT_T303 {
			if (First_Time) {
				Action Send(SETUP);
				Action Start_T303;
			} else {
				Action Post_Mgmt(HANGUP(PRI_CAUSE_NO_USER_RESPONSE));
				Action Release_Call_Reference;
				Next_State q931_user_null;
			}
		}
		Stimulus Q931_EV_MSG_ALERTING {
			Action Post_Mgmt(ALERTING);
			Next_State q931_user_call_delivered;
		}
		Stimulus Q931_EV_MSG_CONNECT {
			Action Post_Mgmt(CONNECT);
			if (Connect_Ack_Option) {
				Action Send(CONNECT_ACKNOWLEDGE);
			}
			Next_State q931_user_active;
		}
	}

/* ******************************************************************** */

	State q931_user_overlap_sending {// aka U2
		Prolog {
			Action Set_State(Q931_CALL_STATE_OVERLAP_SENDING);
			/*
			 * If T304 is -1(default) do not start it because the
			 * upper layer is to enforce/implement the timer.
			 */
			Action Start_T304;
		}
		Init {
		}
		Epilog {
			Action Stop_T304;
		}
		Stimulus Q931_EV_MGMT_OVERLAP_DIGIT(digit) {
			Action Send(INFORMATION(digit));
			Action Stop_T304;
			Action Start_T304;
		}
		Stimulus Q931_EV_MSG_PROCEEDING {
			Action Post_Mgmt(PROCEEDING);
			Next_State q931_user_outgoing_call_proceeding;
		}
		Stimulus Q931_EV_MSG_ALERTING {
			Action Post_Mgmt(ALERTING);
			Next_State q931_user_call_delivered;
		}
		Stimulus Q931_EV_MSG_PROGRESS {
			/* PROGRESS with interworking or tone code */
			if (interworking) {
				Action Stop_T304;
			}
			Action Post_Mgmt(PROGRESS);
		}
		Stimulus Q931_EV_MSG_CONNECT {
			Action Post_Mgmt(CONNECT);
			if (Connect_Ack_Option) {
				Action Send(CONNECT_ACKNOWLEDGE);
			}
			Next_State q931_user_active;
		}
		Stimulus Q931_EV_MGMT_RELEASE_REQ {
			Action Send(RELEASE(PRI_CAUSE_CHANNEL_UNACCEPTABLE));
			Next_State q931_user_release_request;
		}
		Stimulus Q931_EV_TIMEOUT_T304 {
			Action Send(DISCONNECT(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Action Post_Mgmt(HANGUP(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_DL_ESTABLISH_IND {
			Action Send(DISCONNECT());
			Action Post_Mgmt(HANGUP(cause));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_DL_RELEASE_IND {
			Action Post_Mgmt(HANGUP(PRI_CAUSE_NETWORK_OUT_OF_ORDER));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
	}

/* ******************************************************************** */

	State q931_user_outgoing_call_proceeding {// aka U3
		Prolog {
			Action Set_State(Q931_CALL_STATE_OUTGOING_CALL_PROCEEDING);
			Action Start_T310;
		}
		Init {
		}
		Epilog {
			Action Stop_T310;
		}
		Stimulus Q931_EV_MSG_PROGRESS {
			Action Stop_T310;
			Action Post_Mgmt(PROGRESS);
		}
		Stimulus Q931_EV_MSG_ALERTING {
			Action Post_Mgmt(ALERTING);
			Next_State q931_user_call_delivered;
		}
		Stimulus Q931_EV_MSG_CONNECT {
			Action Post_Mgmt(CONNECT);
			if (Connect_Ack_Option) {
				Action Send(CONNECT_ACKNOWLEDGE);
			}
			Next_State q931_user_active;
		}
		Stimulus Q931_EV_TIMEOUT_T310 {
			Action Send(DISCONNECT(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Action Post_Mgmt(HANGUP(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_MGMT_RELEASE_REQ {
			Action Send(RELEASE(PRI_CAUSE_CHANNEL_UNACCEPTABLE));
			Next_State q931_user_release_request;
		}
	}

/* ******************************************************************** */

	State q931_user_call_delivered {// aka U4
		Prolog {
			Action Set_State(Q931_CALL_STATE_CALL_DELIVERED);
			Action Start_T301;
		}
		Init {
		}
		Epilog {
			Action Stop_T301;
		}
		Stimulus Q931_EV_MSG_CONNECT {
			Action Post_Mgmt(CONNECT);
			if (Connect_Ack_Option) {
				Action Send(CONNECT_ACKNOWLEDGE);
			}
			Next_State q931_user_active;
		}
		Stimulus Q931_EV_TIMEOUT_T301 {
			Action Send(DISCONNECT(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Action Post_Mgmt(HANGUP(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Next_State q931_user_disconnect_request;
		}
	}

/* ******************************************************************** */

	State q931_user_call_present {// aka U6
		Prolog {
			Action Set_State(Q931_CALL_STATE_CALL_PRESENT);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_SETUP_ACKNOWLEDGE {
			Action Send(SETUP_ACKNOWLEDGE);
			Next_State q931_user_overlap_receiving;
		}
		Stimulus Q931_EV_MGMT_ALERTING {
			Action Send(ALERTING);
			Next_State q931_user_call_received;
		}
		Stimulus Q931_EV_MGMT_CONNECT {
			Action Send(CONNECT);
			Next_State q931_user_connect_request;
		}
		Stimulus Q931_EV_MGMT_REJECT_REQ(cause) {
			/* Section 5.2.5.1 */
			if (Reject_Option) {
				Send(RELEASE_COMPLETE(PRI_CAUSE_INCOMPATIBLE_DESTINATION))
			}
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MGMT_PROCEEDING {
			Action Send(PROCEEDING);
			Next_State q931_user_incoming_call_proceeding;
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Post_Mgmt(HANGUP(cause));
			Action Send(RELEASE_COMPLETE);
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_DISCONNECT {
			Action Post_Mgmt(HANGUP_REQ(cause));
			Next_State q931_user_disconnect_indication;
		}
	}

/* ******************************************************************** */

	State q931_user_call_received {// aka U7
		Prolog {
			Action Set_State(Q931_CALL_STATE_CALL_RECEIVED);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_CONNECT {
			Action Send(CONNECT);
			Next_State q931_user_connect_request;
		}
	}

/* ******************************************************************** */

	State q931_user_connect_request {// aka U8
		Prolog {
			Action Set_State(Q931_CALL_STATE_CONNECT_REQUEST);
			Action Start_T313;
		}
		Init {
		}
		Epilog {
			Action Stop_T313;
		}
		Stimulus Q931_EV_TIMEOUT_T313 {
			Action Send(DISCONNECT(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Action Post_Mgmt(HANGUP(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_MSG_CONNECT_ACKNOWLEDGE {
			Action Post_Mgmt(CONNECT_ACKNOWLEDGE);
			Next_State q931_user_active;
		}
	}

/* ******************************************************************** */

	State q931_user_incoming_call_proceeding {// aka U9
		Prolog {
			Action Set_State(Q931_CALL_STATE_INCOMING_CALL_PROCEEDING);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_CONNECT {
			Action Send(CONNECT);
			Next_State q931_user_connect_request;
		}
		Stimulus Q931_EV_MGMT_ALERTING {
			Action Send(ALERTING);
			Next_State q931_user_call_received;
		}
		Stimulus Q931_EV_MGMT_PROGRESS {
			Action Send(PROGRESS);
		}
	}

/* ******************************************************************** */

	State q931_user_active {// aka U10
		Prolog {
			Action Set_State(Q931_CALL_STATE_ACTIVE);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_SUSPEND_REQ(call_id) {
			Action Send(SUSPEND(call_id));
			Next_State q931_user_suspend_request;
		}
		Stimulus Q931_EV_MSG_NOTIFY {
			Action Post_Mgmt(NOTIFY);
		}
		Stimulus Q931_EV_MGMT_NOTIFY {
			Action Send(NOTIFY);
		}
		Stimulus Q931_EV_DL_RELEASE_IND {
			/* i.e. if T309 is not already running, start it. */
			if (!Any_Timer_Running) {
				Action Start_T309;
			}
			Action DL_Establish_Request;
		}
	}

/* ******************************************************************** */

	State q931_user_disconnect_request {// aka U11
		Prolog {
			Action Set_State(Q931_CALL_STATE_DISCONNECT_REQUEST);
			Action Start_T305;
		}
		Init {
		}
		Epilog {
			Action Stop_T305;
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Post_Mgmt(HANGUP(cause));
			Action Send(RELEASE_COMPLETE(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_DISCONNECT {
			Action Send(RELEASE(cause));
			Next_State q931_user_release_request;
		}
		Stimulus Q931_EV_TIMEOUT_T305 {
			Action Send(RELEASE(cause));
			Next_State q931_user_release_request;
		}
		Stimulus Q931_EV_MSG_NOTIFY {
			/*
			 * Q.931 Figure A.3 sheet 11 of 25.
			 * The handling of NOTIFY mesages seems incomplete.
			 * Ignore NOTIFY messages?
			 * There does not seem to be any other desireable effect
			 * possible.
			 */
		}
	}

/* ******************************************************************** */

	State q931_user_disconnect_indication {// aka U12
		Prolog {
			Action Set_State(Q931_CALL_STATE_DISCONNECT_INDICATION);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Post_Mgmt(HANGUP(cause));
			Action Send(RELEASE_COMPLETE(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MGMT_RELEASE_REQ {
			Action Send(RELEASE(cause));
			Next_State q931_user_release_request;
		}
	}

/* ******************************************************************** */

	State q931_user_suspend_request {// aka U15
		Prolog {
			Action Set_State(Q931_CALL_STATE_SUSPEND_REQUEST);
			Action Start_T319;
		}
		Init {
		}
		Epilog {
			Action Stop_T319;
		}
		Stimulus Q931_EV_MSG_SUSPEND_ACKNOWLEDGE {
			Action Post_Mgmt(SUSPEND_ACKNOWLEDGE);
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_SUSPEND_REJECT {
			Action Post_Mgmt(SUSPEND_REJECT(cause));
			Next_State q931_user_active;
		}
		Stimulus Q931_EV_MSG_DISCONNECT {
			Action Post_Mgmt(HANGUP_REQ(cause));
			Next_State q931_user_disconnect_indication;
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Post_Mgmt(HANGUP(cause));
			Action Send(RELEASE_COMPLETE(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_TIMEOUT_T319 {
			Action Post_Mgmt(SUSPEND_REJECT(timeout));
			Next_State q931_user_active;
		}
	}

/* ******************************************************************** */

	State q931_user_resume_request {// aka U17
		Prolog {
			Action Set_State(Q931_CALL_STATE_RESUME_REQUEST);
			Action Start_T318;
		}
		Init {
		}
		Epilog {
			Action Stop_T318;
		}
		Stimulus Q931_EV_MSG_RESUME_ACKNOWLEDGE {
			Action Post_Mgmt(RESUME_ACKNOWLEDGE);
			Next_State q931_user_active;
		}
		Stimulus Q931_EV_MSG_RESUME_REJECT {
			Action Post_Mgmt(RESUME_REJECT(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_TIMEOUT_T318 {
			Action Post_Mgmt(RESUME_REJECT(timeout));
			Action Send(RELEASE(PRI_CAUSE_RECOVERY_ON_TIMER_EXPIRE));
			Next_State q931_user_release_request;
		}
	}

/* ******************************************************************** */

	State q931_user_release_request {// aka U19
		Prolog {
			Action Set_State(Q931_CALL_STATE_RELEASE_REQUEST);
			Action Start_T308;
		}
		Init {
		}
		Epilog {
			Action Stop_T308;
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			Action Post_Mgmt(HANGUP_ACKNOWLEDGE);
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Post_Mgmt(HANGUP_ACKNOWLEDGE);
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_TIMEOUT_T308 {
			if (First_Timeout) {
				Action Send(RELEASE(cause));
				Action Start_T308;
			} else {
				/* B channel should be placed in maintenance mode */
				Action Post_Mgmt(HANGUP_ACKNOWLEDGE(timeout));
				Action Release_Call_Reference;
				Next_State q931_user_null;
			}
		}
		Stimulus Q931_EV_MSG_STATUS {
			if (Get_STATUS_Call_State == Q931_CALL_STATE_NULL) {
				Action Post_Mgmt(HANGUP(cause));
				Action Release_Call_Reference;
				Next_State q931_user_null;
			}
		}
	}

/* ******************************************************************** */

	State q931_user_overlap_receiving {// aka U25
		Prolog {
			Action Set_State(Q931_CALL_STATE_OVERLAP_RECEIVING);
			/*
			 * If T302 is -1(default) do not start it because the
			 * upper layer is to enforce/implement the timer.
			 */
			Action Start_T302;
		}
		Init {
		}
		Epilog {
			Action Stop_T302;
		}
		Stimulus Q931_EV_MSG_INFORMATION {
			if (keypad_digits) {
				Action Post_Mgmt(KEYPAD_DIGITS(digits));
			} else {
				Action Post_Mgmt(INFORMATION(digits));
			}
			if (display) {
				Action Post_Mgmt(INFORMATION(display_text));
			}
			Action Stop_T302;
			Action Start_T302;
		}
		Stimulus Q931_EV_MGMT_PROCEEDING {
			Action Send(PROCEEDING);
			Next_State q931_user_incoming_call_proceeding;
		}
		Stimulus Q931_EV_MGMT_ALERTING {
			Action Send(ALERTING);
			Next_State q931_user_call_received;
		}
		Stimulus Q931_EV_MGMT_CONNECT {
			Action Send(CONNECT);
			Next_State q931_user_connect_request;
		}
		Stimulus Q931_EV_TIMEOUT_T302 {
			Action Stop_T302;
			Post_Mgmt(OVERLAP_TIMEOUT);
		}
		Stimulus Q931_EV_MGMT_PROGRESS {
			Action Send(PROGRESS);
		}
		Stimulus Q931_EV_DL_ESTABLISH_IND {
			Action Send(DISCONNECT());
			Action Post_Mgmt(HANGUP(cause));
			Next_State q931_user_disconnect_request;
		}
		Stimulus Q931_EV_DL_RELEASE_IND {
			Action Post_Mgmt(HANGUP(PRI_CAUSE_NETWORK_OUT_OF_ORDER));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
	}

/* ******************************************************************** */

	State q931_user_call_independent_service {// aka U31
		Prolog {
			Action Set_State(Q931_CALL_STATE_CALL_INDEPENDENT_SERVICE);
		}
		Init {
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_FACILITY {
			Action Post_Mgmt(FACILITY);
		}
		Stimulus Q931_EV_MSG_DISCONNECT {
			Action Send(RELEASE(PRI_CAUSE_NORMAL_CLEARING));
		}
		Stimulus Q931_EV_MSG_RELEASE {
			Action Send(RELEASE_COMPLETE(PRI_CAUSE_NORMAL_CLEARING));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MGMT_DISCONNECT_REQ(cause) {
			Action Send(RELEASE_COMPLETE(cause));
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MGMT_RELEASE_REQ {
			Action Send(RELEASE_COMPLETE(cause));
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_DL_RELEASE_IND {
			/* i.e. if T309 is not already running, start it. */
			if (!Any_Timer_Running) {
				Action Start_T309;
			}
			Action DL_Establish_Request;
		}
	}

/* ******************************************************************** */

	Superstate q931_user_alive(All but U0) {
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
			Action Stop_T309;
			//Action Stop_All_Timers;
			if (!upper_layer_knows_call_reference) {
				Action Post_Event(Q931_EV_MGMT_DESTROY);
			}
		}
		Stimulus Q931_EV_MSG_SETUP {
			/* Ignore SETUP messages. */
		}
		Stimulus Q931_EV_MSG_RELEASE {
			/* Ignore RELEASE messages. */
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			/* Ignore RELEASE_COMPLETE messages. */
		}
		Stimulus Q931_EV_MSG_other {
			if (cause_option) {
				Action Send(STATUS(PRI_CAUSE_WRONG_MESSAGE));
			} else if (message_known) {
				Action Send(STATUS(PRI_CAUSE_WRONG_CALL_STATE));
			} else {
				Action Send(STATUS(PRI_CAUSE_MESSAGE_TYPE_NONEXIST));
			}
		}
		Stimulus Q931_EV_DL_RELEASE_IND {
			//Action Stop_All_Timers;
			Action Post_Mgmt(HANGUP(PRI_CAUSE_NETWORK_OUT_OF_ORDER));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_DL_ESTABLISH_CONFIRM {
			Action Stop_T309;
			Action Send(STATUS());
		}
		Stimulus Q931_EV_TIMEOUT_T309 {
			Action Post_Mgmt(HANGUP(PRI_CAUSE_NETWORK_OUT_OF_ORDER));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
	}

/* ******************************************************************** */

	Superstate q931_user_status(All but U0, U19) {/* U0 and U19 already handle STATUS */
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_STATUS {
			if (Get_STATUS_Call_State == Q931_CALL_STATE_NULL) {
				Action Release_Call_Reference;
				Action Post_Mgmt(HANGUP(cause));
				Next_State q931_user_null;
			}
			#if 0
			/*
			 * Implementation option to handle incompatible state.
			 * We choose to do nothing.
			 */
			if (cause == PRI_CAUSE_WRONG_CALL_STATE) {
				Action Post_Mgmt(HANGUP(cause));
				Action Send(DISCONNECT(cause));
				Next_State q931_user_disconnect_request;
			}
			#endif
		}
	}

/* ******************************************************************** */

	Superstate q931_user_tx_info(All but U0, U1, U6, U17, U19) {
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
		}
		Stimulus Q931_EV_MGMT_DISPLAY_TEXT(msg) {
			Action Send(INFORMATION(msg));
		}
	}

/* ******************************************************************** */

	Superstate q931_user_rx_info(All but U0, U1, U6, U17, U19, U25) {/* U25 already handles */
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_INFORMATION {
			if (display) {
				Action Post_Mgmt(INFORMATION(display_text));
			}
		}
	}

/* ******************************************************************** */

	Superstate q931_user_rel_comp(All but U0, U1, U19) {/* U1 and U19 already handle */
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_RELEASE_COMPLETE {
			//Action Stop_All_Timers;
			Action Post_Mgmt(HANGUP_ACK(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
	}

/* ******************************************************************** */

	Superstate q931_user_hangup(All but U0, U1, U6, U11, U12, U15, U17, U19) {/* Uxx already handle */
		Prolog {
		}
		Init {
			Action pri_error("Should never be used.");
		}
		Epilog {
		}
		Stimulus Q931_EV_MSG_RELEASE {
			//Action Stop_All_Timers;
			Action Post_Mgmt(HANGUP(cause));
			Action Send(RELEASE_COMPLETE(cause));
			Action Release_Call_Reference;
			Next_State q931_user_null;
		}
		Stimulus Q931_EV_MSG_DISCONNECT {
			//Action Stop_All_Timers;
			Action Post_Mgmt(HANGUP_REQ(cause));
			Next_State q931_user_disconnect_indication;
		}
		Stimulus Q931_EV_MGMT_DISCONNECT_REQ(cause) {
			Action Send(DISCONNECT(cause));
			Next_State q931_user_disconnect_request;
		}
	}
}
